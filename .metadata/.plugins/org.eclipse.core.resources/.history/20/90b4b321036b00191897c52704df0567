public class ListLinked <T> implements ListaTDA <T>{
	protected int count;
    	protected NodeList<T> first;
	
	public ListLinked(){
		this.first = null;
		this.count = 0;	} 
	
	public void initializeList(){
		destroyList();}
    
   	public boolean isEmpty(){
		return this.first == null;}

	public int length(){ 
		return this.count;}
	
	public void destroyList(){
		while (first.getLink()!= null)
			this.first= this.first.getLink();
		this.first = null;
		this.count= 0;}

	public int search(T searchItem){
		int posi = 0;
		NodeList<T> aux=this.first;
		while(aux!= null && !aux.getInfo().equals(searchItem)) {
			aux=aux.getLink();
			posi ++;
		}
		if(aux!= null)
			return posi;
		return -1;}

    public void insertFirst(T newItem) {
		this.first = new NodeList<T>(newItem,this.first);
		this.count ++;}

	public void insertLast(T newItem) {
		NodeList<T> aux=this.first;
		if(this.isEmpty())
			insertFirst(newItem);
		else {
			while(aux.getLink()!= null )
				aux=aux.getLink();
			aux.setLink(new NodeList<T>(newItem));
			count ++;}
	}

	public void deleteNode(T deleteItem) {
		if(isEmpty()) return;
		if(this.search(deleteItem)== 0) {
			this.first = this.first.getLink();
			this.count--;
		}
		else {
			NodeList<T> aux=this.first;
			while(aux.getLink()!= null && !aux.getLink().getInfo().equals(deleteItem))
				aux=aux.getLink();
				

			if(aux.getLink()!=null) {
				aux.setLink(aux.getLink().getLink());
				this.count--;}
		}
	}

	public String toString() {
		String a="";
		NodeList<T> aux=this.first;
		for(; aux!=null; aux=aux.getLink())
			
			a+=aux+", ";
		return a;
	}
}