package nuevo_2;


public class OrderListLinked<T extends Comparable<T>> extends ListLinked<T>{
	
	public int search(T searchItem){
		NodeList<T> aux = this.first;
		int posi=0;
		while (aux!=null && aux.getInfo().compareTo(searchItem)<0) {
			aux = aux.getLink();
			posi++;
		}
		if(aux!=null && aux.getInfo().equals(searchItem)) {
			return posi;	
		}
		return -1;
	}
	public void insert(T newItem) {
		
		if(isEmpty()) {
			insertFirst(newItem);
			this.count++;
		}
		else {
			NodeList<T> aux = this.first;
			if(aux.getInfo().compareTo(newItem)>0) {
				insertFirst(newItem);
			}else  {
				while(aux.getLink()!= null && aux.getLink().getInfo().compareTo(newItem) < 0) {
					aux = aux.getLink();
				}
				aux.setLink(new NodeList<T>(newItem, aux.getLink()));
				this.count ++;
			}
		}
	}
	
	public void deleteNode(T deleteItem) {
		if(!isEmpty()) {
			int posi = this.search(deleteItem);
			NodeList<T> aux=this.first;
			
			if(posi== 0) {
				this.first = this.first.getLink();
				this.count--;
			}else if (posi>0){
				for(int i=0; i<posi-1; i++) {
					aux=aux.getLink();
				}
				if(aux.getLink()!=null) {
					aux.setLink(aux.getLink().getLink());
					this.count--;
				}	
			}
		}
	}
	
}
